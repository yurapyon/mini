

16bit cells
8bit  instructions

2 circular stacks
p register
a register

00...... 64  core
01...... 64  external
1....... 128 external

core instructions
  0x00 nop
  0x01 execute
  0x02 exit
  0x03 =
  0x04 >
  0x05 >=
  0x06 and
  0x07 ior
  0x08 xor
  0x09 invert
  0x0a lshift
  0x0b rshift
  0x0c 1+
  0x0d 1-
  0x0e >io ( write byte to io )
  0x0f io> ( read byte from io )

  0x10 !a
  0x11 @a
  0x12 @a+
  0x13 a!
  0x14 a@
  0x15 c!a
  0x16 c@a
  0x17 c@a+
  0x18 >r
  0x19 r>
  0x1a r@
  0x1b drop
  0x1c dup
  0x1d swap
  0x1e flip
  0x1f over

  0x20 +
  0x21 -
  0x22 *
  0x23 /
  0x24 mod
  0x25 !p+
  0x26 @p+
  0x27 lit
  0x28 jump
  0x29 call
  0x2a skip0
  0x2b skip
  0x2c
  0x2d
  0x2e
  0x2f

  0x30
  0x31
  0x32
  0x33
  0x34
  0x35
  0x36
  0x37
  0x38
  0x39
  0x3a
  0x3b
  0x3c
  0x3d
  0x3e
  0x3f

stack manipulation
  123 -> 1233  dup
  123 -> 12    drop
  123 -> 132   swap
  123 -> 321   flip
  123 -> 1232  over

  nip  = swap drop
  tuck = swap over
  rot  = swap flip
  -rot = flip swap

quit = 0 >r exit

c!  = a! c!a
c@  = a! c@a
c!+ = a! c!a+ a@

use the p register (ie, the next cell in memory)
  lit
  jump
  call
  skip
  skip0

use byte from p register
  >io
  io>

'=' is the same as 'xor invert'

forth words for memory locations
  context
  here
  latest
  state
  base
  d0 ( end of dictionary )

necessary for input
  find
  next-char
  word
  refill

convenience
  define

notes:
  you may need one of these though to get started
    ' may be needed to compile [ and ] ?
  [ is 0 state !
  ] is 1 state ! ( ] does need to be defined in the compiler context )
  ' is word find drop drop
  ['] is ' defined in the compiler context

