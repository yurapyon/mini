figure out how refill functions should work
  its hard to read a file when the input buffer can only be 128 chars
  need to be able to split things line by line

word headers technically dont need both a terminator and a namelen
could potentially just use one byte for flags and one for name len
for adding mini-word semantics, more flags may be needed

for functions that can return errors
  as long as they won't be called within bytecodes (or as refiller functions)
  they can be more general

better errors in console when vm crashes
  need to keep track of 'last executed string'
  maybe have a debug mode flag

can the vm and interpreter/compiler be more separate?
  somehow separate the program_counter and return stack

it might be nice to not have to worry about alignment from forth
  the stuff accessed from the vm should be aligned, but the dictionary doesn't have to be
  the dictionary is executed byte-by-byte anyway
    this would mean all calls to ! and @ would have to work on a per byte basis though
  as it is:
    cells as data:               have to be aligned
    cells as part of a bytecode: not aligned
  i think thats fine

look into wether this forth is
  direct threaded
  or
  subroutine threaded on a vm
  and put it in the spec sheet :-)
    could be cool to refine the VM and then write other languages on top of it
